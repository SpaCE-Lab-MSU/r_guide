[
["index.html", "Package Management Welcome 0.1 Contributing", " Package Management Pat Bills 6/17/2020 Welcome This guide came from the Spatial Community Ecology Lab at Michigan State Univeristy, and is a collection of techinques, styles, suggestions and requirements for collaboratively writing R code for the MSU Spatial Community and Ecology lab. A programming “style” guide has detailed descriptions of exactly how code is formatted with spacing, indents, function and variable naming, etc. Thee are usually written for professional programmers. This guide is for our R users of varying skill levels and focuses on approaches to broad programming issues (like how to manage configuration, or data organization) that use to allow for collaboration and longevity. Nothing in here is set in stone and is open for suggestion and additions. There will be some formatting and style requirement. For coding style, we refer to, but don’t require the use of the “tidy verse” style guide originally written at google and adopted and amended by Hadley Wickham: (https://style.tidyverse.org/)[https://style.tidyverse.org/] Certainly when learning or in the middle of developing an idea for program, focusing on style can bog you down, much like writing. Refer to this guide when polishing your code or preparing to share your ideas, and especially when packaging for publication. As painful as re-formatting your code and project can be, we find that consistency in approach to programming add efficiency to the programming efforts in the lab. This guide is focused on R but some of the ideas should translate to other scripting languages you may use for the lab, such as python, Javsccript (e.g. EarthEngine), or shell scripts (e.g. Slurm scripts for batch computing on the MSU High Performance Computer). 0.1 Contributing We need your help to document your successful techniques, and we welcome new ideas. This document exists on a public github project https://github.com/SpaCE-Lab-MSU/r_guide. See the README.md file in this project for instructions on how to add new content, fork, make changes and create a merge request. Minimally you may always make suggestions, corrections, or new content by submitting an ‘issue’ on github For details on what that means see [Github.com:Creating an issue](https://help.github.com/en/github/managing-your-work-on-github/creating-an-issue This is written in a form of RMarkdown called “bookdown.” (there will evenntually be a chapter here about Rmarkdown) "],
["documentation.html", "Chapter 1 Documentation", " Chapter 1 Documentation Documenting your work may be the most important part of this style guide. There are many ways to get a script to do it’s work, but a script is useless if we don’t know what it does, and how to use it. There are two main types of in-script documentation : documentation suggested and structure for the lab, and documentation done for R packaging using the program Roxygen2. Roxygen2 is a way to write comments in your code that can automatically be turned into R help documentation. This guide currently does not mention that, but focuses on basics for docs, but these are not exclusive and eventually the stuff here should be made Roxygen2 formatted. Rstudio has features to make it easy to write Roxygen2-style comments. The following in R code all start with Comments (#) All scripts need a good description in the beginning - what does this script do? What kind of data does it read in and what does it output? # TITLE: name of the script # AUTHORS (list anyone contributing to the file) # COLLABORATORS (other people involved in the wider project but not necessarily on the script) # DATA INPUT (a brief description of the data read in through the script, including what format it’s in) # DATA OUTPUT (a brief description of the data output from through the script, including what format it’s in) # PROJECT (what overarching project this is part of: in this case it’s Frugivoria) # DATE (initiation date of script, plus any major update dates) NOTE : this guide was written without consideration for the Roxygen documentation system and if you are working on an R package, you should use that system but incorporate as much of this as possible. See these great introductions to this system : https://kbroman.org/pkg_primer/pages/docs.html and http://r-pkgs.had.co.nz/man.html Note also that Roxygen2 focus is on creating documentation for using functions, not the provenance of a set of scripts which is crucial for a research project. . "],
["configuration.html", "Chapter 2 Configuration 2.1 Quick Points on Configuration 2.2 Using Renviron 2.3 File Paths STandard Configuration 2.4 R Packages for Configuration", " Chapter 2 Configuration Some details about your code depends on who is running it, or where you are running it, or requires personal secrets such as API keys or passwords. If details are hard-coded into your functions or scripts, it will be hard to share your scripts with collaborators but also for reproducibility. One constant problem is scripts need to read files from somewhere, and everyone’s computer has different paths, or the paths differ when run in a different environment (e.g. on a high performance computer). We often see scripts with the configuration variables at the top of the script, and you have to edit those to your environment, or comment them out. But then those go into the git repository, so collaborators have to change them back. Even for your own scripts, you may want to change a file path depending on if you are running on your laptop or on the HPC for example. It’s hard to track down all the places where you have to change these parameters (although global search/replace helps). But it would be better if there was a single, consistent place to put all configuration values shared by scripts in a project Solution R has a built in feature exactly for this purpose - automaticaly reading a file called .Renviron . Using files that start with “.” (so-called dot-files) for configuration is common in Linux (and these files are hidden). Note There are a couple of libraries to make this a bit more slick, but this document describes only features that are part of Base R. We can add description of how to incorporate those below Good summary of .Renviron : www.dartistics.com/renviron.html Not a bad summary of Environment variables : https://en.wikipedia.org/wiki/Environment_variable More detail on Environment vars in Mac/Linux : https://dev.to/gajesh/environment-variables-in-linux-and-mac-os-4j30 To see how R reads dot-files .Renviron and .Rprofile, read the R help ?Startup or see this copy on the web ( I don’t know how current the copy is) : https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/Startup Note that there is also a package called “startup” on CRAN which is an enhancement and not part of base R. .Renviron is for setting values for script configuration. It uses the Operating System Environment to store these (e.g. not the same as an R environment), e.g. “environment variables” Any program can read or set an environment variable. One commonly used variable is $HOME which is your home directory. 2.1 Quick Points on Configuration when R starts it looks for two files .Renviron &lt;- set of environment variables listed in here. Written as shell script .Rprofile &lt;- options for how you like to use R. written as R code If these files are in the local directory, it reads those and stops. If not it looks for them in your home directory (global settings). It only reads one version (e.g. it doesn’t read local then also read global settings) 2.2 Using Renviron Example .Renviron file for you or one of your collaborators. Each person makes their own copy of .Renviron. Note you can use existing operating system variables in this file. This example works for Linux/Mac. Note that this is not R code, and no spaces are allowed around the = equals signs # .Renviron file for project X API_KEY=abc123 OUTPUT_PATH=&quot;$HOME/Documents/NEONOrganism/DataPull&quot; inside your R script or function (this does not need to be edited ) output_path &lt;- Sys.getenv(&#39;OUTPUT_PATH&#39;) api_key &lt;- Sys.getenv(&#39;API_KEY&#39;) Thie code would be placed in your scripts prior to calling functions that needed these values. For example a function that needed the output path saveStuff &lt;- function(x,y, output_path){ # do stuff with x,y # ...etc output_file &lt;- file.path(output_path,&quot;myoutput.csv&quot;) write.csv(x = data.frame(x,y), file=output_file) return(output_file) # ... etc } The main script to run then would x = rnorm(100) y = rnorm(100) output_path &lt;-Sys.getenv(&#39;OUTPUT_PATH&#39;) saved_file &lt;- saveStuff(x, y, output_path) If your code requires configuration values and you use an .Renviron file, you note this in your project’s README.md file, and should provide an example of values, or perhaps a file like example.Renviron Suggested Workflow to use lab code that needs configuration in Renviron: clone the repository in the README.md look to see which configuration settings are needed and/or looked for an example file Renviron text file. create a new .Renviron file in the top level folder of the repository with the necessary configuration open a new Rstudio project in that folder (or start R) which would then read the .Renviron settings run the code repeat for different environment (e.g. laptop vs HPCC) workflow when using configuration in your code with Renviron: put configuration in .Renviron and add Sys.getenv() calls to set those vars in R add those configuration vars in Renivron_example.txt with comments to describe possible values add a list of the configuration need in the README.md add .Renviron to your .gitignore file to keep it out of github An optional but polite thing to do for other users of your code is to check for these values If the variable is not set, Sys.genenv returns Null. Can you set a reasonable default if it’s not set in Renviron? If not, send a me You could test that the value the user supplied (or default) actually work 4) throw exception if they don’t and print message which value needs to be set and where to look for guidance (see README) A good example of this is the rredlist package from Bioconductor that pulls data from the IUCN Redlist API. This requires an API key, which the package suggested putting into .Renviron and there is a function that checks if the key provided is Null, or if it’s in Renviron. See https://github.com/ropensci/rredlist/blob/master/R/zzz.R#L36 Note the .Rprofile should be used to customize your R experience, not set configuration for a particular set of scripts. See https://www.statmethods.net/interface/customizing.html 2.3 File Paths STandard Configuration TO BE WRITTEN 2.4 R Packages for Configuration These other packages/features work to make configuration easier, or could be part of a configuration strategy. They are not necessary but may make it easier if your project’s configuration is complex. startup: https://cran.r-project.org/web/packages/startup/vignettes/startup-intro.html Package from Henrik Bengtsson to make it easier to work with .Renviron and Rprofile. Don’t know how well is plays with config config: https://cran.r-project.org/web/packages/config/vignettes/introduction.html Package from Rstudio to make it easy to have different Environments so you can easily switch out configuration, for example the paths/data connections you’d use for testing would be different for local and from HPCC. This is especially important when working with “production” or shared databases as you want to develop/test code on a local copy before running it on the central database or one used by an active web application dotenv: older package that borrows from python. Does not use Renviron but a “dot-env” or “.env” file just like Renviron. I think using Renviron makes more sense but mention this as it comes up when searching. A package like this is required in Python because there is nothing built-in to handle config. options: https://stat.ethz.ch/R-manual/R-devel/library/base/html/options.html part of base R and a way to set options globally so you don’t have to send them as parameter to every function. This is complimentary to Renviron: set config values in Renviron, use the options() function to set global options var in R based on those env variables. "],
["rmarkdown.html", "Chapter 3 RMarkdown 3.1 Examples of RMarkdown: 3.2 R Notebooks", " Chapter 3 RMarkdown After you’ve written source code and maybe a package, an RMarkdown document is a good way to demonstrate how to use your code and results. R Markdown is an authoring framework for R code and output. R Markdown is part word-processor, part R output. It enables you to generate nice reports with R code, figures, tables, and text. It’s handy because it produces neat summaries of your work in HTML or PDF or other formats (Word docs). R Markdown is especially helpful with collaborative research and coursework, and is often used in supplemental materials with publications. If you haven’t already watched the R Markdown tutorial, you may want to refer to it when putting together an analysis write-up: http://rmarkdown.rstudio.com/lesson-1.html (including “How it Works”, “Code Chunks”, and “Markdown Basics”). I recommend using “KnitR” when you want to publish (i.e., click on “knit to HTML”, “knit to PDF”, etc. in the pull-down menu in RStudio). When you click the Knit button in R Studio (looks like a knitting needle with ball of yarn) a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. Book on RMarkdown by the author: https://bookdown.org/yihui/rmarkdown/ Tutorial from Rstudio : https://rmarkdown.rstudio.com/articles_intro.html Hadley Wickahm’s chapter on Rmarkdown: https://r4ds.had.co.nz/r-markdown.html introduction from U of M https://m-clark.github.io/Introduction-to-Rmarkdown/, I like this intro because the author was a grad student: https://rpubs.com/brandonkopp/RMarkdown Communicating with R Markdown: A full-day workshop for users who want to get more out of R Markdown (and friends): https://ysc-rmarkdown.netlify.app/ 3.1 Examples of RMarkdown: All of the tutorials form https://ourcodingclub.github.io/tutorials.html are written in RMarkdown. You can view these tutorials in the github repository for their website, e.g https://github.com/ourcodingclub/ourcodingclub.github.io/tree/master/_tutorials If you open any one of these .md files in github and click ‘raw’ you see the markdown code. Note that Rstudio is not required to use RMarkdown but it’s the entry point for most. Rstudio has extended Rmarkdown to make it interactive for reporting (e.g. with Shiny, another topic entirely) 3.2 R Notebooks This is an Rstudio feature that builds up on RMarkdown and is a way to interactively create an RMarkdown file much like the Rconsole. It’s patterned after Jupyter Notebooks used for Python. It’s not required to write RMarkdown. "],
["package-management.html", "Chapter 4 Package Management 4.1 Getting Started 4.2 updating a project 4.3 Using a project that uses renv", " Chapter 4 Package Management The use renv to manage packages for your scripts. This lets you have different sets of packages for each project, is easy and automatic to use, and creates a file that others can use to know which packages they need to install. Most scripts require you to install specific packages. Over time these packages are updated, and changes to one or more packages can cause conflicts or incompatibility errors. In addition, you may be working or collaborating on multiple R projects with that use different and conflicting libraries. Using ‘install.packages()’ by default will isntall in your home directory for all projects. Finally, projects shold have a way to efficiently share which packages are needed for it to run. Package management is the way to deal with these. renv is a new library (Spring 2020 ) and the first to handle it successfully When starting a new project (or sprucing up and old one) follow the directions on https://rstudio.github.io/renv/ 4.1 Getting Started See the renv doc but in short, in your project main folder install.packages(&#39;renv&#39;) # if you haven&#39;t yet renv::init() In the .gitignore file add the renv folder (this is where packages are installed for your platform renv/** In your README.md, add the code above to let collaborators know how to get the packages they need. Push the changes into github including the renv.lock file which lists the packages you just installed 4.2 updating a project When you install new packages, because of the .Rprofile settings they will automatically be installed in renv/ and the renv.lock file will be updated ( I think - please confirm). 4.3 Using a project that uses renv After cloning a project, the process is the same as for new projects: install.packages(&#39;renv&#39;) # if you haven&#39;t yet renv::init() Need to write: how to update renv if a collaborator installs new packages and updates the renv.lock file … renv::init() again? "]
]
