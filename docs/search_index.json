[
["index.html", "R Guide for Spatial Ecology Welcome 0.1 Contributing", " R Guide for Spatial Ecology Patrick Bills, MSU SpaCElab Phoebe Zarnetske, MSU SpaCElab 2020-09-28 Welcome This guide came from the Spatial &amp; Community Ecology Lab at Michigan State Univeristy, and is a collection of techinques, styles, suggestions and requirements for collaboratively writing R code for the MSU Spatial Community and Ecology lab. A programming “style” guide has detailed descriptions of exactly how code is formatted with spacing, indents, function and variable naming, etc. Thee are usually written for professional programmers. This guide is for our R users of varying skill levels and focuses on approaches to broad programming issues (like how to manage configuration, or data organization) that use to allow for collaboration and longevity. Nothing in here is set in stone and is open for suggestion and additions. There will be some formatting and style requirement. For coding style, we refer to, but don’t require the use of the “tidy verse” style guide originally written at google and adopted and amended by Hadley Wickham: (https://style.tidyverse.org/)[https://style.tidyverse.org/] Certainly when learning or in the middle of developing an idea for program, focusing on style can bog you down, much like writing. Refer to this guide when polishing your code or preparing to share your ideas, and especially when packaging for publication. As painful as re-formatting your code and project can be, we find that consistency in approach to programming add efficiency to the programming efforts in the lab. This guide is focused on R but some of the ideas should translate to other scripting languages you may use for the lab, such as python, Javsccript (e.g. EarthEngine), or shell scripts (e.g. Slurm scripts for batch computing on the MSU High Performance Computer). 0.1 Contributing We need your help to document your successful techniques, and we welcome new ideas. This document exists on a public github project https://github.com/SpaCE-Lab-MSU/r_guide. See the README.md file in this project for instructions on how to add new content, fork, make changes and create a merge request. Minimally you may always make suggestions, corrections, or new content by submitting an ‘issue’ on github For details on what that means see [Github.com:Creating an issue](https://help.github.com/en/github/managing-your-work-on-github/creating-an-issue This is written in a form of RMarkdown called “bookdown.” (there will evenntually be a chapter here about Rmarkdown) This work is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License "],
["installing-r-and-rstudio.html", "Chapter 1 Installing R and RStudio 1.1 What is R? 1.2 Installing R 1.3 Installing RStudio 1.4 About R Packages, briefly 1.5 Next", " Chapter 1 Installing R and RStudio “For absolute beginners” We’ve looked for a straightfoward install guide - there are many on the web - but couldn’t find one that we liked and that was up to date. Feedback is welcome! 1.1 What is R? “R is a free software environment for statistical computing and graphics.” R is both a scripting language for statistics, and an application that runs code in that language and displays the results (text, tables, plots, and more). R if often associated with statistics but is incredibly powerful for so much more. The R system along can be used to work with R, but the Rstudio application makes this much easier to work with, and and not required to work with R, but with many additional features. Rstudio is a commercial application separate from R, but free for personal and academic use. Rstudio does not come with R, you need to install R first, and then Rstudio. Both run on all major and modern operating systems. CRAN is the “Comprehensive R Archive Network” is a collection of instuttions who share the hosting of download sites for R, since this is costly to maintain. CRAN is the central sites, and there are many “mirrors” or replicates of CRAN. All mirrors have the same website and same versions any one of them can be used. The University of Michigan hosts a CRAN mirror that we will use. For all operating systems, go to https://repo.miserver.it.umich.edu/cran/ 1.2 Installing R 1.2.0.1 R on Windows 10 Installing R : Visit the CRAN mirror page, and click the “Download R for Windows” link, which downloads a file named “R-x.y.z-win.exe” or similar which is latest the version of R (in rare cases one may need an earlier version of R but we will use the latest). Open this R…-win.exe file and go through the installation, Leave all default settings in the installation options. You may need adminstrator access to install. 1.2.0.2 R on Mac Visit the CRAN mirror page, and click the “Download R for mac” link, which downloads a “.pkg” file. Open that file and follow the default instructions. 1.3 Installing RStudio Rstudio has several versions, and you want “Rstudio Desktop” “open source edition” Here is the link https://rstudio.com/products/rstudio/download/#download In the first column labeled “RStudio Desktop / Open Source License (Free),” click Download Rstudio Desktop On the next page, click the first button if it matches your operating system (Mac/Windows) or scroll down and select “RStudio-1.3…exe” for Windows and RStudio-1.3…..dmg for Mac, or your flavor of Linux. Windows: double click or open the exe file and follow the insructions Mac: Rstudio is not available on AppStore, you must download and install with this method. You must be running MacOS 10.13 or higher. If you have an old Mac, you may consider looking for an older version of Rstudio ( https://rstudio.com/products/rstudio/older-versions/ ) Once downloaded, double click the dmg file in your downloads, locate the DMG and open it. Drag Rstudio to your application folder. this is standard install method for software outside of the app store. You don’t need any other downloads, not the Zip file, or the Source code, to run and install Rstudio Desktop. 1.4 About R Packages, briefly R by itself if powerful, but the real power comes from additional libaries and packages. Packages give you more functions to use in your programs, more types of graphs, or mapping, etc. CRAN currently hosts over 16,000 packages. There are a couple of ways to install packages. One way, and what most tutorials suggest, is to use the R console (R commands) and type the install.packages() command with the name of the package. For example, for the package named ‘MASS’ the command is install.packages('MASS') All R packages are listed on the CRAN website https://cran.r-project.org/web/packages/available_packages_by_name.html After an R tutorial this will be more clear when and where to type this command. The second is the graphical interface built into RStudio from which you can search and download any R package available on CRAN. Find the “packages” tab which lists the currently installed packages. Click the “install” button which shows you a search box. Start typing a name and if the package you want is displayed, select it and then click “install” There are other places to get packages than only CRAN. Datacamp has a pretty good description of packages here : https://www.datacamp.com/community/tutorials/r-packages-guide 1.5 Next There are hundreds of tutorials about R online, but this is a Great collection of tutorials put together by graduate students. There is a tutorial on spatial analysis with R, with Puffins. https://ourcodingclub.github.io/tutorials.html "],
["documentation.html", "Chapter 2 Documentation", " Chapter 2 Documentation Documenting your work may be the most important part of this style guide. There are many ways to get a script to do it’s work, but a script is useless if we don’t know what it does, and how to use it. There are two main types of in-script documentation : documentation suggested and structure for the lab, and documentation done for R packaging using the program Roxygen2. Roxygen2 is a way to write comments in your code that can automatically be turned into R help documentation. This guide currently does not mention that, but focuses on basics for docs, but these are not exclusive and eventually the stuff here should be made Roxygen2 formatted. Rstudio has features to make it easy to write Roxygen2-style comments. The following in R code all start with Comments (#) All scripts need a good description in the beginning - what does this script do? What kind of data does it read in and what does it output? Each .R script and Markdown script should contain the following header. Note that the words in CAPS should appear when knit to PDF. Setting up 2 columns is helpful to visually separate terms with descriptors as below. # TITLE: name of the script # PROJECT: name of project that this script is part of # AUTHORS: list anyone contributing to the file # COLLABORATORS: other people involved in the wider project but not necessarily on the script # DATA INPUT: a brief description of the data read in through the script, including what format it’s in # DATA OUTPUT: a brief description of the data output from through the script, including what format it’s in # DATE: initiation date of script, plus any major update dates # OVERVIEW: Brief description of what this script does # REQUIRES: any scripts or code sources that are required # NOTES: any additional information that is necessary / helpful to describe what needs to be done next # *Example:* # TITLE: NEON Small Mammal Diversity Maps, Local to Regional # PROJECT: &quot;NEON&#39;s continental-scale biodiversity&quot; # AUTHORS: Quentin Read, Phoebe Zarnetske, Jon Knott # COLLABORATORS: Sydne Record (Bryn Mawr), Ben Baiser (UFL), Angela Strecker (WWU), Kate Thibault (NEON) # DATA INPUT: NEON organismal diversity data: all species, all years, all sites: neon_org_data_all.csv # Range map data (IUCN) (iucn_mammal.shp) # DATA OUTPUT: neon_mammal_richness_map.pdf, neon_mammal_richness.shp, multi_panel_mammal_plot.pdf # DATE: initiated: June 18, 2018; last run: 23 July 2020 # OVERVIEW: This script reads in NEON&#39;s small mammal diversity data, maps 2019 NEON diversity at NEON sites, maps background diversity across the US, and plots local (site or plot) vs. regional species pool relationships. # REQUIRES: Small mammals: (1) L0_mammal_diversity_cleaning.R (2) L1_mammal_diversity.R # NOTES: Lots of functions in here to pull out and reference because they will apply to each taxa. Add functionality to plot different years, and cumulative diversity across all years: requiring edit to L1_mammal_diversity.R NOTE : this guide was written without consideration for the Roxygen documentation system and if you are working on an R package, you should use that system but incorporate as much of this as possible. See these great introductions to this system : https://kbroman.org/pkg_primer/pages/docs.html and http://r-pkgs.had.co.nz/man.html Note also that Roxygen2 focus is on creating documentation for using functions, not the provenance of a set of scripts which is crucial for a research project. . "],
["configuration.html", "Chapter 3 Configuration 3.1 Quick Points on Configuration 3.2 Using Renviron 3.3 File Paths STandard Configuration 3.4 R Packages for Configuration", " Chapter 3 Configuration Some details about your code depends on who is running it, or where you are running it, or requires personal secrets such as API keys or passwords. If details are hard-coded into your functions or scripts, it will be hard to share your scripts with collaborators but also for reproducibility. One constant problem is scripts need to read files from somewhere, and everyone’s computer has different paths, or the paths differ when run in a different environment (e.g. on a high performance computer). We often see scripts with the configuration variables at the top of the script, and you have to edit those to your environment, or comment them out. But then those go into the git repository, so collaborators have to change them back. Even for your own scripts, you may want to change a file path depending on if you are running on your laptop or on the HPC for example. It’s hard to track down all the places where you have to change these parameters (although global search/replace helps). But it would be better if there was a single, consistent place to put all configuration values shared by scripts in a project Solution R has a built in feature exactly for this purpose - automaticaly reading a file called .Renviron . Using files that start with “.” (so-called dot-files) for configuration is common in Linux (and these files are hidden). Note There are a couple of libraries to make this a bit more slick, but this document describes only features that are part of Base R. We can add description of how to incorporate those below Good summary of .Renviron : www.dartistics.com/renviron.html Not a bad summary of Environment variables : https://en.wikipedia.org/wiki/Environment_variable More detail on Environment vars in Mac/Linux : https://dev.to/gajesh/environment-variables-in-linux-and-mac-os-4j30 To see how R reads dot-files .Renviron and .Rprofile, read the R help ?Startup or see this copy on the web ( I don’t know how current the copy is) : https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/Startup Note that there is also a package called “startup” on CRAN which is an enhancement and not part of base R. .Renviron is for setting values for script configuration. It uses the Operating System Environment to store these (e.g. not the same as an R environment), e.g. “environment variables” Any program can read or set an environment variable. One commonly used variable is $HOME which is your home directory. 3.1 Quick Points on Configuration when R starts it looks for two files .Renviron &lt;- set of environment variables listed in here. Written as shell script .Rprofile &lt;- options for how you like to use R. written as R code If these files are in the local directory, it reads those and stops. If not it looks for them in your home directory (global settings). It only reads one version (e.g. it doesn’t read local then also read global settings) 3.2 Using Renviron Example .Renviron file for you or one of your collaborators. Each person makes their own copy of .Renviron. Note you can use existing operating system variables in this file. This example works for Linux/Mac. Note that this is not R code, and no spaces are allowed around the = equals signs # .Renviron file for project X API_KEY=abc123 OUTPUT_PATH=&quot;$HOME/Documents/NEONOrganism/DataPull&quot; inside your R script or function (this does not need to be edited ) output_path &lt;- Sys.getenv(&#39;OUTPUT_PATH&#39;) api_key &lt;- Sys.getenv(&#39;API_KEY&#39;) Thie code would be placed in your scripts prior to calling functions that needed these values. For example a function that needed the output path saveStuff &lt;- function(x,y, output_path){ # do stuff with x,y # ...etc output_file &lt;- file.path(output_path,&quot;myoutput.csv&quot;) write.csv(x = data.frame(x,y), file=output_file) return(output_file) # ... etc } The main script to run then would x = rnorm(100) y = rnorm(100) output_path &lt;-Sys.getenv(&#39;OUTPUT_PATH&#39;) saved_file &lt;- saveStuff(x, y, output_path) If your code requires configuration values and you use an .Renviron file, you note this in your project’s README.md file, and should provide an example of values, or perhaps a file like example.Renviron Suggested Workflow to use lab code that needs configuration in Renviron: clone the repository in the README.md look to see which configuration settings are needed and/or looked for an example file Renviron text file. create a new .Renviron file in the top level folder of the repository with the necessary configuration open a new Rstudio project in that folder (or start R) which would then read the .Renviron settings run the code repeat for different environment (e.g. laptop vs HPCC) workflow when using configuration in your code with Renviron: put configuration in .Renviron and add Sys.getenv() calls to set those vars in R add those configuration vars in Renivron_example.txt with comments to describe possible values add a list of the configuration need in the README.md add .Renviron to your .gitignore file to keep it out of github An optional but polite thing to do for other users of your code is to check for these values If the variable is not set, Sys.genenv returns Null. Can you set a reasonable default if it’s not set in Renviron? If not, send a me You could test that the value the user supplied (or default) actually work 4) throw exception if they don’t and print message which value needs to be set and where to look for guidance (see README) A good example of this is the rredlist package from Bioconductor that pulls data from the IUCN Redlist API. This requires an API key, which the package suggested putting into .Renviron and there is a function that checks if the key provided is Null, or if it’s in Renviron. See https://github.com/ropensci/rredlist/blob/master/R/zzz.R#L36 Note the .Rprofile should be used to customize your R experience, not set configuration for a particular set of scripts. See https://www.statmethods.net/interface/customizing.html 3.3 File Paths STandard Configuration TO BE WRITTEN 3.4 R Packages for Configuration These other packages/features work to make configuration easier, or could be part of a configuration strategy. They are not necessary but may make it easier if your project’s configuration is complex. startup: https://cran.r-project.org/web/packages/startup/vignettes/startup-intro.html Package from Henrik Bengtsson to make it easier to work with .Renviron and Rprofile. Don’t know how well is plays with config config: https://cran.r-project.org/web/packages/config/vignettes/introduction.html Package from Rstudio to make it easy to have different Environments so you can easily switch out configuration, for example the paths/data connections you’d use for testing would be different for local and from HPCC. This is especially important when working with “production” or shared databases as you want to develop/test code on a local copy before running it on the central database or one used by an active web application dotenv: older package that borrows from python. Does not use Renviron but a “dot-env” or “.env” file just like Renviron. I think using Renviron makes more sense but mention this as it comes up when searching. A package like this is required in Python because there is nothing built-in to handle config. options: https://stat.ethz.ch/R-manual/R-devel/library/base/html/options.html part of base R and a way to set options globally so you don’t have to send them as parameter to every function. This is complimentary to Renviron: set config values in Renviron, use the options() function to set global options var in R based on those env variables. "],
["rmarkdown.html", "Chapter 4 RMarkdown 4.1 Examples of RMarkdown: 4.2 R Notebooks 4.3 RMarkdown, Knittr and File paths", " Chapter 4 RMarkdown After you’ve written source code and maybe a package, an RMarkdown document is a good way to demonstrate how to use your code and results. R Markdown is an authoring framework for R code and output. R Markdown is part word-processor, part R output. It enables you to generate nice reports with R code, figures, tables, and text. It’s handy because it produces neat summaries of your work in HTML or PDF or other formats (Word docs). R Markdown is especially helpful with collaborative research and coursework, and is often used in supplemental materials with publications. If you haven’t already watched the R Markdown tutorial, you may want to refer to it when putting together an analysis write-up: http://rmarkdown.rstudio.com/lesson-1.html (including “How it Works”, “Code Chunks”, and “Markdown Basics”). I recommend using “KnitR” when you want to publish (i.e., click on “knit to HTML”, “knit to PDF”, etc. in the pull-down menu in RStudio). When you click the Knit button in R Studio (looks like a knitting needle with ball of yarn) a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. Book on RMarkdown by the author: https://bookdown.org/yihui/rmarkdown/ Tutorial from Rstudio : https://rmarkdown.rstudio.com/articles_intro.html Hadley Wickahm’s chapter on Rmarkdown: https://r4ds.had.co.nz/r-markdown.html introduction from U of M https://m-clark.github.io/Introduction-to-Rmarkdown/, I like this intro because the author was a grad student: https://rpubs.com/brandonkopp/RMarkdown Communicating with R Markdown: A full-day workshop for users who want to get more out of R Markdown (and friends): https://ysc-rmarkdown.netlify.app/ 4.1 Examples of RMarkdown: All of the tutorials form https://ourcodingclub.github.io/tutorials.html are written in RMarkdown. You can view these tutorials in the github repository for their website, e.g https://github.com/ourcodingclub/ourcodingclub.github.io/tree/master/_tutorials If you open any one of these .md files in github and click ‘raw’ you see the markdown code. Note that Rstudio is not required to use RMarkdown but it’s the entry point for most. Rstudio has extended Rmarkdown to make it interactive for reporting (e.g. with Shiny, another topic entirely) 4.2 R Notebooks This is an Rstudio feature that builds up on RMarkdown and is a way to interactively create an RMarkdown file much like the Rconsole. It’s patterned after Jupyter Notebooks used for Python. It’s not required to write RMarkdown. Rstudio also has a feature where you can run chunks of code one by one before knitting, similar to the experience of Python notebooks. 4.3 RMarkdown, Knittr and File paths Sometimes your markdown file or your code depends on files beiung in particular paths (e.g. data files). When you source a script from the console, the working directory is what ever you’ve swet it to, or the top directory of your Rstudio project if you haven’t. This is also true when you run chunks in an Rmarkdown file as descrihbed above. However, when you ‘knit’ an Rmd file, the working directory is set (setwd() ) to the directory in which the markdown file sits. This is different, and your markdown file may not be able to find files when using knittr than when you ran ti before. Knitr, by default, looks in the same directory as your .Rmd file to find any files you need to draw in, like data sets or script files. If you keep your data files and scripts in separate folders (and you should) you need to configure knitr. You cannot use setwd() with knitr (or several other file-related operations like file.exists() ). One way to do this is to include uin the ‘setup’ code chunk, which is usually at the top of RMD file (Rstudio puts a chunk in when you create a new Rmd file: ` ` ` {r setup, include=FALSE, echo=FALSE} require(&quot;knitr&quot;) knitr::opts_chunk$set(echo = TRUE) opts_knit$set(root.dir = &quot;~/path/to/folder/&quot;) ` ` ` (taken from blog post by Phil Mike Jones ) This approach is not reproducible as it is a folder on your computer (not anyone else’s). Also the tilde “~” is shortcut for a users’s homedirctory on Linux or Mac but not Windows. One optionsis to place the root folder of your entire Rstudio project as an ‘option’ or environment variable that is set, e.g. ` ` `{ r setup, include=FALSE, echo=FALSE} require(&quot;knitr&quot;) knitr::opts_chunk$set(echo = TRUE) opts_knit$set(root.dir = file.path(options(&quot;projfolder&quot;))) ` ` ` There is a package to help this : “ezknitr - Avoid the typical working directory pain when using ‘knitr’” https://cran.r-project.org/web/packages/ezknitr/README.html Another option is to use an .Renviron file and set a value there. More ideas here: https://stackoverflow.com/questions/33107908/how-to-tell-if-code-is-executed-within-a-knitr-rmarkdown-context Some are Rstudio specific which would mean we’d have to dictate Rstudio usage "],
["package-management.html", "Chapter 5 Package Management", " Chapter 5 Package Management Summary: use the ‘renv’ package to help manage your project’s R packages, and to ‘lock’ in specific versions to avoid breaking changes: https://rstudio.github.io/renv/articles/renv.html Nearly all R scripts require you to install additional packages. Over time these packages are updated, and changes to one or more packages can cause conflicts or incompatibility errors. In addition, you may be working or collaborating on multiple R projects with that use different and conflicting libraries. Using ‘install.packages()’ by default will install in your home directory for all projects. Finally, projects shold have a way to efficiently share which packages are needed for it to run. For those reasons several groups have create “package manager” is the way to deal with these. The package ‘renv’, is a new library (Spring 2020 ), and the first to handle it successfully The vignette for this package is very clearly written and easy to follow: https://rstudio.github.io/renv/articles/renv.html but here is a summary and a caveat 5.0.1 Getting Started Soon after creating a main folder for your project (in Rstudio or just for R), run the following : install.packages(&#39;renv&#39;) # if you haven&#39;t yet renv::init() This will read through your R code to find libraries you are using, and install them for this project. It also creates an .Rprofile file that is use to ‘activate’ this project to use renv for all future package installations. you may use install.packages() commands and Renv will capture them. It creates a list of all of your packages in renv.lock As you work, use renv::snapshot() to update the lock file. If you download a project that is using renv, it will have a renv.lock file which lists the packages that project needs. You intall them using renv::restore() 5.0.2 Additional actions code errors will break renv initialization When looking for packages to install, if there are syntax errors in R scripts (anywhere) the renv::init() process will crash. You’ll have to fix those errors (or comment them out) to proceed gitignore In the .gitignore file add the renv folder (this is where packages are installed for your platform, else those will be included in your git repository renv/** Make sure to add .gitignore to the project git repository, and push the changes into github including the renv.lock file which lists the packages you just installed instructions for users In your README.md, add the information to use renv::restore() to let collaborators know how to get the packages they need. do-overs If the lock file just isn’t correct, or you need to update all the packages, you can re-use renv::init() to start over. "],
["writing-scripts.html", "Chapter 6 Writing Scripts 6.1 Naming Things 6.2 writing code", " Chapter 6 Writing Scripts DRAFT : this is incomplete *Note: you should read and incorporate ideas in the tidyverse style guide 6.1 Naming Things 6.1.1 Script File Names Script names not have spaces or capital letters. We will use script names in other scripts and files or in commands and spaces can cause trouble. A file names should be mostly if not all lowercase, and not include spaces and end with standard extensions. File folders should also have no spaces and be lower case. Most operating systems allow spaces in file names, but when using these in other places they must always be quoted or the spaces ‘escaped’ R uses standard file extensions: .R : R script .py : python script .txt : plain text file (could be data, or text, not a script) .csv : comma seperated data, there are a few standards for how these are formatted .tsv : tab separated data .Rdata : Data saved from your R session. .sh : Linux shell script, used on the HPC .sb : HPC Slurm batch submission script (short for ‘sbatch’ ,the command to submit a batch job) 6.1.2 Variable and Function Names see the tidyverse style guide above. 6.2 writing code 6.2.1 Editor Use programming editors to write your scripts only. Don’t write scripts in MS Word, Windows Notepad, Google docs or Mac Textedit. By default these programs will convert basic quote character \" to “curly quotes” which will crash your program. ( e.g. “ ” ) The Rstudio or R GUI editors are perfect for this 6.2.2 Line Endings Line endings should be standard Linux/Unixline endings, which is a single line feed. Line Endings are only an issue because Windows uses different line endings than the rest of the world, and scripts with Windows line endings will not run on linux (e.g. the MSU HPC or cloud systems). Rstudio will silently convert these to linux line endings for you. Only Windows users may have to worry about line endings. We mention them because one consequence of this translation of Line endings in script is when using git. The power of git is to see what has changed in code and who changed it. Changing line endings will make it appear that the entire script was changed and we’d lose the ability to see the change. "],
["using-r-with-git.html", "Chapter 7 Using R with Git", " Chapter 7 Using R with Git and some git suggestions This is a book about R but the theme is collaboration for that we depend on git and github. This chapter will hold links and suggestions for commits, branches, merging ,etc See seciton 9.3 in Chapter 9 Efficient collaboration in The book Efficient R programming to start "],
["data-generation-workflow-with-make.html", "Chapter 8 Data Generation Workflow with “Make” 8.1 Motivation 8.2 Usage", " Chapter 8 Data Generation Workflow with “Make” “What gets done stays done” 8.1 Motivation We strive to organize our code that cleans data, generated new data, or generates figures into sequential steps. As we work we may alter any one of the steps along the way and want to re-run the sequence, but some of the steps may take non-significant time (5min &lt; t &lt; 60min). The challenge is to only run those steps affected by our change, without having to re-run those that are not. In addition some steps may be non sequeuntial, and can be run seperately or as an aside. This is not uncommon for any software ‘build’ process. If we consider the production of our cleaned (L1) and derived (L2) data (ref EDI framework) analagous to a software “build,” there are many tools to help with that. For example, the GNU Make utility written in 1976 in Bell Labs. 8.2 Usage Using Make: A minimal tutorial on make from kbroman Using Drake (Make for R): https://github.com/ropensci/drake "]
]
